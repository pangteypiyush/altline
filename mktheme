#!/usr/bin/env python3

from os.path import isfile
import argparse
import configparser

CONFIG_PREFIX = 'AL'


def initialize():
    arg_parser = argparse.ArgumentParser(description='Compile altline themes')
    arg_parser.add_argument('theme', type=str, help='input theme file')
    arg_parser.add_argument('output', type=str, help='output file')
    return arg_parser.parse_args()


def compile(filename):
    config = configparser.ConfigParser()
    outbuf = [CONFIG_PREFIX + '_CORE_THEME=true']
    if not isfile(filename):
        raise Exception(f'Cannot readfile \'{filename}\'')
    try:
        config.read(filename)
        for section in config.sections():
            for (key, val) in config.items(section):
                setting = '_'.join([CONFIG_PREFIX, section, key])
                if val in ['false', 'no']:
                    continue
                if key in ['bg', 'fg']:
                    val = color_hex_to_term(val)
                outbuf.append(setting.upper() + '="' + val + '"')
    except configparser.Error as err:
        raise Exception('Invalid ini file') from err
    return outbuf


def color_hex_to_term(hexcolor):
    color = hexcolor.lstrip('#')
    if len(color) == 3:
        color = ''.join(color[i] * 2 for i in (0, 1, 2))
    if len(color) != 6:
        raise Exception('invalid hex color')
    termcolor = ';'.join(str(int(color[i:i+2], 16)) for i in (0, 2, 4)) + 'm'
    return termcolor


def generatefile(filename, content):
    output = open(filename, 'w+')
    output.write('\n'.join(content))
    output.close()


if __name__ == '__main__':
    args = initialize()
    generatefile(filename=args.output, content=compile(filename=args.theme))
